#include <string.h>
#include "msp430f2272.h"
#include "define.h"
#include "flash.h"
#include "init.h"
#include "cc1101.h"
#include "process.h"
#include "timer_a.h"

INT8U ZJ_freq_channel = 0;
INT8U   bRfRcv           = 0;
INT8U   bRfSend          = 0;
extern INT16U timerA_count;
extern INT8U usart_rx_success;
INT8U transceiver_status; 
INT8U data_from_host[MAX_DATA_SIZE];

void process_data_from_host(INT8U* data, INT8U len);
void process_data_from_node(INT8U*data, INT8U len);

void init_drivers(void){   
	WDTCTL = WDTPW + WDTHOLD; 
	_DINT(); 
	InitLed();
	InitSysClk();
	InitTimerA();
	InitUCA0();
	Init485();
	init_cc1101();
	_EINT();
}

void feed_watchdog(void){
	WDTCTL = WDTPW + WDTCNTCL;
}

void debug_print(char* string, INT8U len){
	UartTransmitPacket((INT8U*)string, len);
}
#define LED_PERIOD 1000

INT8U led_flash(void){
	static ulong led_time_tick ;
	
	if(timeout(led_time_tick, LED_PERIOD)){
		status_led_reverse();
		led_time_tick = _local_tickime();
		return 1;	
	}
	return 0;
}

INT8U read_para_from_flash(void){
	INT8U para[3];
	INT8U i;
	
	for(i = 0; i < 3; i++){
		ReadFlash(ZJ_PARA_FLASH_ADDR, para, 2);
		if(para[0] == 0x55){
			ZJ_freq_channel = para[1];
			return 1;
		}	
	}
	return 0;
}

int main(void){
	
	INT8U wireless_rxbuf[MSG_LEN];
	INT8U wireless_rxlen;
  	
  	init_drivers();
  	
  	if(read_para_from_flash()){
  		cc1101_set_channel(ZJ_freq_channel);	
  	}
	#ifdef DEBUG_MODE
	debug_print("0123", sizeof("0123"));
	#endif
	//WDTCTL = WDT_ARST_1000;
	CC1101SetTRMode(RX_MODE );
	while(1){
		if(led_flash()){
			#ifdef TX_DEBUG
			send_freq_request_ack();
			#endif	
		}
		//feed_watchdog();
		wireless_rxlen = CC1101RecPacket(wireless_rxbuf);
			if(wireless_rxlen){		
				#ifdef DEBUG_MODE
				debug_print((char*) wireless_rxbuf, wireless_rxlen);	
				#endif
				//process_data_from_node(wireless_rxbuf, wireless_rxlen);
			}
		/*if (bRfRcv)	{
			bRfRcv = 0;
			debug_print("12", 2);
			memset(wireless_rxbuf, 0, wireless_rxlen);
			wireless_rxlen = CC1101RecPacket(wireless_rxbuf);
			if(wireless_rxlen){		
				#ifdef DEBUG_MODE
				debug_print((char*) wireless_rxbuf, wireless_rxlen);	
				#endif
				//process_data_from_node(wireless_rxbuf, wireless_rxlen);
			}
		}*/
		if(usart_rx_success == 1){
			uart_communication_indicate();
			process_data_from_host(data_from_host, 11);
			memset(data_from_host, 0, 11);
			usart_rx_success = 0;
		}
	}
}
