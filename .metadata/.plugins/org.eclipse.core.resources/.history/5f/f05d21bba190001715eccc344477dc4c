//#include "msp430f2272.h"
#include "define.h"
#include "task.h"
#include "interrupt.h"
#include "timer_a.h"

static INT16U  hbcnt    = 0;
INT8U   SKeyRole       = 0;

static INT8U   FKeyPressCnt   = 0;
static INT8U   SKeyPressCnt   = 0;
ulong _local_time_tick;

static void process_key_press_event(void){
	if (FUNCT_BUTTON_DW)
	{
		if (++FKeyPressCnt >= L_PRESS_INTVL)
		{
			FKeyPressCnt = 0;
			
			SET_FLG(bNeedCalibrate);
			
			//TIMER_A_STOP;
			
			//__bic_SR_register_on_exit(LPM3_bits);
		}
	}
	else if (START_BUTTON_DW)
	{
		if (++SKeyPressCnt >= L_PRESS_INTVL)
		{
			SKeyPressCnt = 0;
			
			SET_FLG(bNeedConfig);
			
			//TIMER_A_STOP;
			
			//__bic_SR_register_on_exit(LPM3_bits);
		}
	}
	else if (IsClr(ButtonIntSrc) && FUNCT_BUTTON_UP)
	{
		if (S_PRESS_INTVL <= FKeyPressCnt && FKeyPressCnt < L_PRESS_INTVL){
			if (ContainerType == BAG){
		   		ContainerType = BOTTLE;
		   		LED_STATUS_OFF;
	   		}
			else{
		   		ContainerType = BAG;
		   		LED_STATUS_ON;
			}
			//TIMER_A_STOP;
			FKeyPressCnt = 0;
		}
		else  // this is a signal jitter
		{
			FKeyPressCnt = 0;
		}
	}
	else if (IsSet(ButtonIntSrc) && START_BUTTON_UP)
	{
		if (S_PRESS_INTVL <= SKeyPressCnt && SKeyPressCnt < L_PRESS_INTVL)
		{
			if (IsClr(SKeyRole))
			{
				SET_FLG(SKeyRole);
				SET_FLG(bStart);
			}
			else
			{
				CLR_FLG(SKeyRole);
				SET_FLG(bStop);
			}
			SKeyPressCnt = 0;
			//TIMER_A_STOP;
		}
		else  // this is a signal jitter
		{
			SKeyPressCnt = 0;
		}
	}
}
static void process_heart_blink_event(void){
	if (hbcnt++ >= HB_INTVL)
	{
		hbcnt = 0;
		SET_FLG(bHeartBeat);
		//__bic_SR_register_on_exit(LPM3_bits);
	}
	 
	if (++BlinkIntvCnt >= BOT_BLINK_INTVL)
	{
		BlinkIntvCnt = 0;
	 	
	 	if (LED_SWITCH_ON)
	 	{
	 		if (BOTTLE == ContainerType)
	 		{
	 			LED_STATUS_BLINK;
	 		}
	 		else
	 		{
	 			LED_STATUS_ON;
	 		}
	 	}
	}
}
// 100ms peroid
#pragma vector=TIMERA0_VECTOR
__interrupt void Timer_A (void)
{
	_local_time_tick++;
	
	
	
}

ulong local_ticktime(void){
	return _local_time_tick	;
}

bool timeout(ulong last_time, ulong ms){
	return (bool)((_local_time_tick - last_time) > ms);
}
