#include <msp430.h>
#include "Define.h"
//#include "flash.h"

//char value;                                 // 8-bit value to write to seg C
unsigned char Serialbuf[MSG_LEN];
unsigned char Serialleng;
char SerialFlag;

// Function prototypes
void write_SegC(char value);
void copy_C2D(void);

void flash_init(void)
{
 /* WDTCTL = WDTPW + WDTHOLD;                 // Stop watchdog timer
  if (CALBC1_1MHZ==0xFF)					// If calibration constant erased
  {											
    while(1);                               // do not load, trap CPU!!	
  }
  DCOCTL = 0;                               // Select lowest DCOx and MODx settings
  BCSCTL1 = CALBC1_1MHZ;                    // Set DCO to 1MHz
  DCOCTL = CALDCO_1MHZ;
  FCTL2 = FWKEY + FSSEL0 + FN1;             // MCLK/3 for Flash Timing Generator
  value = 0;         */                       // initialize value
}

void write_SegC(unsigned char value)
{
  char *Flash_ptr;                          // Flash pointer
  unsigned int i;

  Flash_ptr = (char *)0x1040;               // Initialize Flash pointer
  FCTL3 = FWKEY;                            // Clear Lock bit
  FCTL1 = FWKEY + ERASE;                    // Set Erase bit
  *Flash_ptr = 0;                           // Dummy write to erase Flash seg

  FCTL1 = FWKEY + WRT;                      // Set WRT bit for write operation

  for (i = 0; i < 64; i++)
  {
    *Flash_ptr++ = value;                   // Write value to flash
  }

  FCTL1 = FWKEY;                            // Clear WRT bit
  FCTL3 = FWKEY + LOCK;                     // Set LOCK bit
}

void copy_C2D(void)
{
  char *Flash_ptrC;                         // Segment C pointer
  char *Flash_ptrD;                         // Segment D pointer
  unsigned int i;

  Flash_ptrC = (char *)0x1040;              // Initialize Flash segment C ptr
  Flash_ptrD = (char *)0x1000;              // Initialize Flash segment D ptr
  FCTL3 = FWKEY;                            // Clear Lock bit
  FCTL1 = FWKEY + ERASE;                    // Set Erase bit
  *Flash_ptrD = 0;                          // Dummy write to erase Flash seg D
  FCTL1 = FWKEY + WRT;                      // Set WRT bit for write operation

  for (i = 0; i < 64; i++)
  {
    *Flash_ptrD++ = *Flash_ptrC++;          // copy value segment C to seg D
  }

  FCTL1 = FWKEY;                            // Clear WRT bit
  FCTL3 = FWKEY + LOCK;                     // Set LOCK bit
}

INT8U WriteFlash(INT16U addr, INT8U *buf, INT8U len)//
{
	INT8U reg1 = IE1;
	INT8U reg2 = IE2;
	
	_DINT();  // diable interrupts
	
	while (FCTL3 & BUSY);  // wait for the end of previous operation
	
  	FCTL3 = FWKEY;  // Clear Lock bit
  	FCTL1 = FWKEY + WRT;  // Set WRT bit for write operation

  	for (INT8U i = 0; i < len; i++)
  	{
    	*(INT8U*)addr++ = buf[i];  // Write value to flash
  	}

	while (FCTL3 & BUSY);  // wait for the end of current operation
	
  	FCTL1 = FWKEY;  // Clear WRT bit
  	FCTL3 = FWKEY + LOCK;  // Set LOCK bit
  	
  	_EINT();  // enable interrupts
  	
  	IE1 = reg1;
  	IE2 = reg2;
  	
  	return (FCTL3 & FAIL);  // return 0 for success, 1 otherwise
}

void ReadFlash(INT16U addr, INT8U *buf, INT8U len)
{
	for(INT8U i = 0; i < len; i++)
	{
    	buf[i] = *(INT8U*)addr++;
	}

	return;
}

/*void Uart_init(void)
{
  //WDTCTL = WDTPW + WDTHOLD;                 // Stop WDT
   if (CALBC1_1MHZ==0xFF)                   // If calibration constant erased
  {
    while(1);                               // do not load, trap CPU!!
  }
  DCOCTL = 0;                               // Select lowest DCOx and MODx settings
  BCSCTL1 = CALBC1_1MHZ;                    // Set DCO
  DCOCTL = CALDCO_1MHZ;
  P3SEL = 0x30;                             // P3.4,5 = USCI_A0 TXD/RXD
  UCA0CTL1 |= UCSSEL_2;                     // SMCLK
  UCA0BR0 = 104;                            // 1MHz 9600
  UCA0BR1 = 0;                              // 1MHz 9600
  UCA0MCTL = UCBRS0;                        // Modulation UCBRSx = 1
  UCA0CTL1 &= ~UCSWRST;                     // **Initialize USCI state machine**
  IE2 |= UCA0RXIE;                          // Enable USCI_A0 RX interrupt

  __bis_SR_register(LPM0_bits + GIE);       // Enter LPM0, interrupts enabled
}*/

//  Echo back RXed character, confirm TX buffer is ready first
/*#if defined(__TI_COMPILER_VERSION__) || defined(__IAR_SYSTEMS_ICC__)
#pragma vector=USCIAB0RX_VECTOR
__interrupt void USCI0RX_ISR(void)
#elif defined(__GNUC__)
void __attribute__ ((interrupt(USCIAB0RX_VECTOR))) USCI0RX_ISR (void)
#else
#error Compiler not supported!
#endif
{
  while (!(IFG2&UCA0TXIFG));                // USCI_A0 TX buffer ready?
       Serialbuf[Serialleng++]=UCA0RXBUF;//RXBUF0;
  if(Serialleng==11)
  {
  	 Serialleng=0;
     SerialFlag=1;
  }//UCA0TXBUF = UCA0RXBUF;                    // TX -> RXed character
}*/
