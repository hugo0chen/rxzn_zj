#include <string.h>
#include "msp430f2272.h"
#include "define.h"
#include "flash.h"
#include "init.h"
#include "cc1101.h"
#include "process.h"
#include "timer_a.h"

INT8U   bRfRcv           = 0;
INT8U   bRfSend          = 0;
INT8U wireless_rxbuf[64];
INT8U wireless_rxlen;
INT8U data_from_host[MAX_DATA_SIZE];
INT8U data_from_host_len;
extern INT8U usart_rx_success;

void init_drivers(void){   
	_DINT(); 
	InitLed();
	InitTimerA();
	InitUCA0();
	Init485();
	init_cc1101();
	_EINT();
}

void feed_watchdog(void){
	WDTCTL = WDT_ARST_1000;
}

void debug_print(char* string, INT8U len){
	UartTransmitPacket((INT8U*)string, len);
}
#define LED_PERIOD 1000

INT8U led_flash(void){
	static ulong led_time_tick ;
	
	if(timeout(led_time_tick, LED_PERIOD)){
		status_led_reverse();
		P2OUT ^= BIT4; // debug
		led_time_tick = _local_tickime();
		return 1;	
	}
	return 0;
}

INT8U read_para_from_flash(void){
	INT8U para[3];
	INT8U i;
	
	for(i = 0; i < 3; i++){
		ReadFlash(ZJ_PARA_FLASH_ADDR, para, 2);
		if(para[0] == 0x55){
			cc1101_set_channel(para[1]);
			return 1;
		}	
	}
	return 0;
}
int main(void){
  WDTCTL = WDTPW + WDTHOLD;                 // Stop Watchdog Timer
  if (CALBC1_8MHZ==0xFF)					// If calibration constant erased
  {											
    while(1);                               // do not load, trap CPU!!	
  }
  //BCSCTL3 |= XCAP_3; //12.5pf load
  DCOCTL = 0;                               // Select lowest DCOx and MODx settings
  BCSCTL1 = CALBC1_8MHZ;                    // Set DCO to 8MHz
  DCOCTL = CALDCO_8MHZ;
  
  P2DIR |= 0x07;                            // P2.0,1,2 output direction
  P2SEL |= 0x03;                            // P2.0 = ACLK, P2.1 = SMCLK

  while (1){
    P2OUT |= 0x04;                          // P2.2 = 1
    P2OUT &= ~0x04;                         // P2.2 = 0
  }

/*
int main(void){ 
	WDTCTL = WDTPW + WDTHOLD; 
	InitSysClk();
	if((IFG1&OFIFG) == 1) goto RST_FROM_OFIFG;
  	init_drivers();
  	uart_trx_led_on();	
  	wireless_trx_led_on();
  	if(!read_para_from_flash()){
  		//reset mcu
  		//((void (*)())0xFFFE)();
  	}
	debug_print("reset\n\r", sizeof("reset\n\r"));
	WDTCTL = WDT_ARST_1000;
	CC1101SetTRMode(RX_MODE );
	RF_GDO2_INT_E;
	
	while(1){
		
		RST_FROM_OFIFG: led_flash();
		feed_watchdog();
		if (bRfRcv){
			bRfRcv = 0;
			wireless_trx_led_on();
			memset(wireless_rxbuf, 0, 64);
			wireless_rxlen = CC1101RecPacket(wireless_rxbuf);	
			if(wireless_rxlen){		
				//debug_print((char*) wireless_rxbuf, wireless_rxlen);	
				process_data_from_node(wireless_rxbuf, wireless_rxlen);
			}
			CC1101SetTRMode(RX_MODE);
			wireless_trx_led_off();
		}
		if(usart_rx_success == 1){
			uart_trx_led_on();
			//debug_print(data_from_host, data_from_host_len);
			process_data_from_host(data_from_host, data_from_host_len);
			memset(data_from_host, 0, data_from_host_len);
			data_from_host_len = 0;
			usart_rx_success = 0;
			uart_trx_led_off();
		}
	}
}
*/