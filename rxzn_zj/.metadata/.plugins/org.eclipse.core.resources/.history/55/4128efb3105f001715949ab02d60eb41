#include "rfsend.h"
#include "Define.h"

//******************************************************************************
//*****更多功率参数设置可详细参考DATACC1100英文文档中第48-49页的参数表**********
//INT8U PaTabel[8] = {0x04 ,0x04 ,0x04 ,0x04 ,0x04 ,0x04 ,0x04 ,0x04}; //-30dBm 功率最小
INT8U PaTabel[8] = {0x60 ,0x60 ,0x60 ,0x60 ,0x60 ,0x60 ,0x60 ,0x60}; //0dBm
//INT8U PaTabel[8] = {0xC0 ,0xC0 ,0xC0 ,0xC0 ,0xC0 ,0xC0 ,0xC0 ,0xC0}; //10dBm 功率最大
//=======================定义RF1100-1101寄存器结构体数组 =================================
typedef struct S_RF_SETTINGS
{
	INT8U IOCFG2; // GDO2 output pin configuration
	INT8U IOCFG0; // GDO0 output pin configuration
	INT8U PKTLEN; // Packet length.
	INT8U PKTCTRL1; // Packet automation control.
	INT8U PKTCTRL0; // Packet automation control.
	INT8U ADDR; // Device address.
	INT8U CHANNR; // Channel number.
	INT8U FSCTRL2;
	INT8U FSCTRL1; // Frequency synthesizer control.
	INT8U FSCTRL0; // Frequency synthesizer control.
	INT8U FREQ2; // Frequency control word, high INT8U.
	INT8U FREQ1; // Frequency control word, middle INT8U.
	INT8U FREQ0; // Frequency control word, low INT8U.
	INT8U MDMCFG4; // Modem configuration.
	INT8U MDMCFG3; // Modem configuration.
	INT8U MDMCFG2; // Modem configuration.
	INT8U MDMCFG1; // Modem configuration.
	INT8U MDMCFG0; // Modem configuration.
	INT8U DEVIATN; // Modem deviation setting (when FSK modulation is enabled).
	INT8U MCSM0; // Main Radio Control State Machine configuration.
	INT8U FOCCFG; // Frequency Offset Compensation Configuration.
	INT8U BSCFG; // Bit synchronization Configuration.
	INT8U AGCCTRL2; // AGC control.
	INT8U AGCCTRL1; // AGC control.
	INT8U AGCCTRL0; // AGC control.
	INT8U FREND1; // Front end RX configuration.
	INT8U FREND0; // Front end RX configuration.
	INT8U FSCAL3; // Frequency synthesizer calibration.
	INT8U FSCAL2; // Frequency synthesizer calibration.
	INT8U FSCAL1; // Frequency synthesizer calibration.
	INT8U FSCAL0; // Frequency synthesizer calibration.
	INT8U FSTEST; // Frequency synthesizer calibration control
	INT8U TEST2; // Various test settings.
	INT8U TEST1; // Various test settings.
	INT8U TEST0; // Various test settings.
} RF_SETTINGS;
//==========================CC1100-1101寄存器配置===============================
const RF_SETTINGS rfSettings =
{
	0x06,///读一包数据后清空0x14, // IOCFG2 GDO2 output pin configuration.
	0x07, // IOCFG0D GDO0 output pin configuration. Refer to SmartRF?Studio User Manual for detailed pseudo register explanation.
	0x3D, // PKTLEN Packet length.最大
	0x04, // PKTCTRL1 Packet automation control.使能地址过滤
	0x05, // PKTCTRL0 Packet automation control.
	0x00, // ADDR Device address.
	0x25, // CHANNR Channel number.    
	0x00,
	0x08, // FSCTRL1 Frequency synthesizer control.
	0x00, // FSCTRL0 Frequency synthesizer control.
	0x10, // FREQ2 Frequency control word, high byte.
	0xA7, // FREQ1 Frequency control word, middle byte.
	0x62, // FREQ0 Frequency control word, low byte.
	0x5B, // MDMCFG4 Modem configuration.
	0xF8, // MDMCFG3 Modem configuration.
	0x13, // MDMCFG2 Modem configuration.
	0x22, // MDMCFG1 Modem configuration.
	0xF8, // MDMCFG0 Modem configuration.
	0x47, // DEVIATN Modem deviation setting (when FSK modulation is enabled).
	0x18, // MCSM0 Main Radio Control State Machine configuration.
	0x1D, // FOCCFG Frequency Offset Compensation Configuration.
	0x1C, // BSCFG Bit synchronization Configuration.
	0xC7, // AGCCTRL2 AGC control.
	0x00, // AGCCTRL1 AGC control.
	0xB2, // AGCCTRL0 AGC control.
	0xB6, // FREND1 Front end RX configuration.
	0x10, // FREND0 Front end RX configuration.
	0xEA, // FSCAL3 Frequency synthesizer calibration.
	0x2A, // FSCAL2 Frequency synthesizer calibration.
	0x00, // FSCAL1 Frequency synthesizer calibration.
	0x1F, // FSCAL0 Frequency synthesizer calibration.
	0x59, // FSTEST Frequency synthesizer calibration.
	0x81, // TEST2 Various test settings.
	0x35, // TEST1 Various test settings.
	0x09 // TEST0 Various test settings.
};
//******************************SPI状态初始化***********************************
void SpiInit(void)
{
//P5DIR |= 0xC0; P5DIR |= 0xFB; P5SEL&=0xF0;
//DDRB |= BIT(PB0) | BIT(PB3) | BIT(PB2) & ~BIT(PB1) & ~BIT(PB4);
}
//==============================================================================
void RF1100_IO_set(void)
{
	//SpiInit();
//	P1DIR |= 0X58;
	//PORTD |= BIT(PD0) | BIT(PD3);
}
//==============================================================================
//******************************************************************************
//函数名：delay(unsigned int s)
//输入：时间
//输出：无
//功能描述：普通廷时,内部用
//*****************************************************************************
void delay(unsigned int s)
{
	unsigned int i;
	for(i=0; i<s; i++);
	for(i=0; i<s; i++);
}
//========================延时约5ms=============================================
/*void Delay5ms(void)
{
	INT16U i=40000;
	while (i != 0)
	{
		i--;
	//ResetWDT();
	}
}*/
void Delay1ms(void)
{
	INT16U i=4000;
	while (i != 0)
	{
		i--;
	}
}
/*void Delay_ms(unsigned int s)
{
	unsigned long i;
	i=8000*s;
	while (--i)
	{
	}
}*/
//******************************************************************************
void halWait(INT16U timeout)
{
	char i;
	do
	{
		for(i=0; i<20; i++);
	} while (--timeout);
}
//******************************************************************************
//函数名：SpisendByte(INT8U dat)
//输入：发送的数据
//输出：无
//功能描述：SPI发送一个字节
//******************************************************************************
INT8U SpiTxRxByte(INT8U dat)
{
	//----------------------以下是模拟SPI时序方式-----------------------------------
	INT8U i,temp;
	temp = 0;
	//LED1_0;

	SCK_0 ;
	for(i=0; i<8; i++)
	{
		if(dat & 0x80)
		{
			MOSI_1;
		}
		else
		{
			MOSI_0;
		}
		dat <<= 1;
		SCK_1;
		temp <<= 1;
		//a=Read_CC1100_MISO; //读取MISO状态
		//if(P3IN& 0x04)temp++;
		if(MISO) temp++;  //MISO
		SCK_0 ;
	}

	//while(!(IFG2 & UCB0TXIFG));
	//UCB0TXBUF = dat;
	//while (!(IFG2 & UCB0RXIFG));
	//temp = UCB0RXBUF;
//	LED1_1;
	return temp;
}
//*******************************************************************************
//函数名：void RESET_CC1100(void)
//输入：无
//输出：无
//功能描述：复位CC1100
//*****************************************************************************************
unsigned char RESET_CC1100(void)
{
	unsigned char j = 0;
	CSN_0 ;
	//while(MISO);
	do{
	j++;
	if(200 == j) {j = 0; return MISO_ERROR;}
	}while(!MISO);
	SpiTxRxByte(CCxxx0_SRES); //写入复位命令
	do
	{
		j++;
		if(200 == j) {j = 0; return MISO_ERROR;}
	}while(!MISO);
	//while(MISO);
	CSN_1;
	return 0;
}
//*****************************************************************************************
//函数名：void POWER_UP_RESET_CC1100(void)
//输入：无
//输出：无
//功能描述：上电复位CC1100
//*****************************************************************************************
void POWER_UP_RESET_CC1100(void)
{
	CSN_1;
	halWait(1);
	CSN_0 ;
	halWait(1);
	CSN_1;
	halWait(41);
	RESET_CC1100(); //复位CC1100
}
//*****************************************************************************************
//函数名：void halSpiWriteReg(INT8U addr, INT8U value)
//输入：地址和配置字
//输出：无
//功能描述：SPI写寄存器
//*****************************************************************************************
void halSpiWriteReg(INT8U addr, INT8U value)
{
	unsigned char j = 0;
	CSN_0;
	//while (P5IN& 0x04);
	//while(MISO);
	do
	{
		j++;
		if(200 == j) return;
	}while(!MISO);
	SpiTxRxByte(addr); //写地址
	SpiTxRxByte(value); //写入配置
	CSN_1;
}
//*****************************************************************************************
//函数名：void halSpiWriteBurstReg(INT8U addr, INT8U *buffer, INT8U count)
//输入：地址，写入缓冲区，写入个数
//输出：无
//功能描述：SPI连续写配置寄存器
//*****************************************************************************************
void halSpiWriteBurstReg(INT8U addr, INT8U *buffer, INT8U count)
{
	unsigned char j = 0;
	INT8U i, temp;
	temp = addr | WRITE_BURST;
	CSN_0;
	//while (P5IN & 0x04);
	//while(MISO);
	do
	{
		j++;
	if(200 == j) return;
	}while(!MISO);;
	SpiTxRxByte(temp);
	for (i = 0; i < count; i++)
	{
		SpiTxRxByte(buffer[i]);
	}
	CSN_1;
}
//*****************************************************************************************
//函数名：void halSpiStrobe(INT8U strobe)
//输入：命令
//输出：无
//功能描述：SPI写命令
//*****************************************************************************************
void halSpiStrobe(INT8U strobe)
{
	unsigned char j = 0;
	CSN_0;
	//while (P5IN & 0x04);
	//while(MISO);
	do
	{
		j++;
		if(200 == j) return;
	}while(!MISO);
	SpiTxRxByte(strobe); //写入命令
	CSN_1;
}
//*****************************************************************************************
//函数名：INT8U halSpiReadReg(INT8U addr)
//输入：地址
//输出：该寄存器的配置字
//功能描述：SPI读寄存器
//*****************************************************************************************
INT8U halSpiReadReg(INT8U addr)
{
	unsigned char j = 0;
	INT8U temp, value;
	temp = addr|READ_SINGLE;//读寄存器命令
	CSN_0;
	//while (P5IN & 0x04);
	//while(MISO);
	do
	{
		j++;
		if(j == 200) return MISO_ERROR;
	}while(!MISO);
	SpiTxRxByte(temp);
	value = SpiTxRxByte(0);
	CSN_1;
	return value;
}
//*****************************************************************************************
//函数名：void halSpiReadBurstReg(INT8U addr, INT8U *buffer, INT8U count)
//输入：地址，读出数据后暂存的缓冲区，读出配置个数
//输出：无
//功能描述：SPI连续写配置寄存器
//*****************************************************************************************
void halSpiReadBurstReg(INT8U addr, INT8U *buffer, INT8U count)
{
	unsigned char j = 0;
	INT8U i,temp;
	temp = addr | READ_BURST; //写入要读的配置寄存器地址和读命令
	CSN_0;
	// while (P5IN & 0x04);
	//while(MISO);
	do
	{
		j++;
		if(200 == j)
			return;
	}while(!MISO);
	SpiTxRxByte(temp);
	for (i = 0; i < count; i++)
	{
		buffer[i] = SpiTxRxByte(0);
	}
	CSN_1;
}
//*****************************************************************************************
//函数名：INT8U halSpiReadReg(INT8U addr)
//输入：地址
//输出：该状态寄存器当前值
//功能描述：SPI读状态寄存器
//*****************************************************************************************
INT8U halSpiReadStatus(INT8U addr)
{
	unsigned char j = 0;
	INT8U value,temp;
	temp = addr | READ_BURST; //写入要读的状态寄存器的地址同时写入读命令
	CSN_0;
	//while (P5IN & 0x04);
	//while(MISO);
	do
	{
	j++;
	if(200 == j) return MISO_ERROR;
	}while(!MISO);
	SpiTxRxByte(temp);
	value = SpiTxRxByte(0);
	CSN_1;
	return value;
}
//*****************************************************************************************
//函数名：void halRfWriteRfSettings(RF_SETTINGS *pRfSettings)
//输入：无
//输出：无
//功能描述：配置CC1100的寄存器
//*****************************************************************************************
void halRfWriteRfSettings(void)
{
	//halSpiWriteReg(CCxxx0_FSCTRL0, rfSettings.FSCTRL2);//自已加的
	// Write register settings
	halSpiWriteReg(CCxxx0_IOCFG2, rfSettings.IOCFG2);
	halSpiWriteReg(CCxxx0_IOCFG0, rfSettings.IOCFG0);
	halSpiWriteReg(CCxxx0_PKTLEN, rfSettings.PKTLEN);
	halSpiWriteReg(CCxxx0_PKTCTRL1, rfSettings.PKTCTRL1);
	halSpiWriteReg(CCxxx0_PKTCTRL0, rfSettings.PKTCTRL0);
	halSpiWriteReg(CCxxx0_ADDR, rfSettings.ADDR);
	halSpiWriteReg(CCxxx0_CHANNR, rfSettings.CHANNR);
	halSpiWriteReg(CCxxx0_FSCTRL1, rfSettings.FSCTRL1);
	halSpiWriteReg(CCxxx0_FSCTRL0, rfSettings.FSCTRL0);
	halSpiWriteReg(CCxxx0_FREQ2, rfSettings.FREQ2);
	halSpiWriteReg(CCxxx0_FREQ1, rfSettings.FREQ1);
	halSpiWriteReg(CCxxx0_FREQ0, rfSettings.FREQ0);
	halSpiWriteReg(CCxxx0_MDMCFG4, rfSettings.MDMCFG4);
	halSpiWriteReg(CCxxx0_MDMCFG3, rfSettings.MDMCFG3);
	halSpiWriteReg(CCxxx0_MDMCFG2, rfSettings.MDMCFG2);
	halSpiWriteReg(CCxxx0_MDMCFG1, rfSettings.MDMCFG1);
	halSpiWriteReg(CCxxx0_MDMCFG0, rfSettings.MDMCFG0);
	halSpiWriteReg(CCxxx0_DEVIATN, rfSettings.DEVIATN);
	halSpiWriteReg(CCxxx0_MCSM0 , rfSettings.MCSM0 );
	halSpiWriteReg(CCxxx0_FOCCFG, rfSettings.FOCCFG);
	halSpiWriteReg(CCxxx0_BSCFG, rfSettings.BSCFG);
	halSpiWriteReg(CCxxx0_AGCCTRL2, rfSettings.AGCCTRL2);
	halSpiWriteReg(CCxxx0_AGCCTRL1, rfSettings.AGCCTRL1);
	halSpiWriteReg(CCxxx0_AGCCTRL0, rfSettings.AGCCTRL0);
	halSpiWriteReg(CCxxx0_FREND1, rfSettings.FREND1);
	halSpiWriteReg(CCxxx0_FREND0, rfSettings.FREND0);
	halSpiWriteReg(CCxxx0_FSCAL3, rfSettings.FSCAL3);
	halSpiWriteReg(CCxxx0_FSCAL2, rfSettings.FSCAL2);
	halSpiWriteReg(CCxxx0_FSCAL1, rfSettings.FSCAL1);
	halSpiWriteReg(CCxxx0_FSCAL0, rfSettings.FSCAL0);
	halSpiWriteReg(CCxxx0_FSTEST, rfSettings.FSTEST);
	halSpiWriteReg(CCxxx0_TEST2, rfSettings.TEST2);
	halSpiWriteReg(CCxxx0_TEST1, rfSettings.TEST1);
	halSpiWriteReg(CCxxx0_TEST0, rfSettings.TEST0);
}
//*****************************************************************************************
//函数名：void halRfSendPacket(INT8U *txBuffer, INT8U size)
//输入：发送的缓冲区，发送数据个数
//输出：无
//功能描述：CC1100发送一组数据
//*****************************************************************************************
void halRfSendPacket(INT8U *txBuffer, INT8U size)
{
	halSpiStrobe(CCxxx0_SIDLE); //强制进入空闲状态
	delay(2); //等待数据全部发送完成
	halSpiWriteReg(CCxxx0_TXFIFO, size);//写入缓冲地址，发送数据个数
	halSpiWriteBurstReg(CCxxx0_TXFIFO, txBuffer, size); //写入要发送的数据
	halSpiStrobe(CCxxx0_STX); //进入发送模式发送数据
	// Wait for GDO0 to be set -> sync transmitted
	//while(!GDO0);
	//while(!(GDO0));
	delay(2000);
	// Wait for GDO0 to be cleared -> end of packet
	//while(GDO0);
	//while(GDO0);
	halSpiStrobe(CCxxx0_SFTX);//清空TXFIFO缓冲区
	delay(4);
	halSpiStrobe(CCxxx0_SIDLE);//强制进入空闲状态
}
//------------------------------------------------------------------------------
/*
void setRxMode(void)
{
halSpiStrobe(CCxxx0_SRX); //进入接收状态
}
*/
//------------------------------------------------------------------------------
INT8U halRfReceivePacket(INT8U *rxBuffer, INT8U *length)
{
	//unsigned char j = 0;
	INT8U status[2];
	INT8U packetLength;
	INT8U i=(*length)*4; // 具体多少要根据datarate和length来决定
	halSpiStrobe(CCxxx0_SRX); //进入接收状态
	//while(!GDO0);
	//while(!(PINB & BIT(PB4)));
	delay(2);
	//while (P2IN & 0x80)
	while(P3IN & BIT2);
	{
		delay(2);
		--i;
		if(i<1)
		return 0;
	}
	if ((halSpiReadStatus(CCxxx0_RXBYTES) & BYTES_IN_RXFIFO)) //如果接的字节数不为0
	{
		packetLength = halSpiReadReg(CCxxx0_RXFIFO);//读出第一个字节，此字节为该帧数据长度
		if (packetLength <= *length) //如果所要的有效数据长度小于等于接收到的数据包的长度
		{
			halSpiReadBurstReg(CCxxx0_RXFIFO, rxBuffer, packetLength); //读出所有接收到的数据
			*length = packetLength; //把接收数据长度的修改为当前数据的长度
			// Read the 2 appended status bytes (status[0] = RSSI, status[1] = LQI)
			halSpiReadBurstReg(CCxxx0_RXFIFO, status, 2); //读出CRC校验位
			halSpiStrobe(CCxxx0_SFRX); //清洗接收缓冲区
			return (status[1] & CRC_OK); //如果校验成功返回接收成功
		}
		else
		{
			*length = packetLength;
			halSpiStrobe(CCxxx0_SFRX); //清洗接收缓冲区
			return 0;
		}
	}
	else
		return 0;
}

///////////////2017 -6 -23,lyb add////////////////////////
void CC1101_Sleep()
{
   halSpiStrobe(0x39);
}
